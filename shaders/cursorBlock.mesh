struct UBOMatrices {
	float4x4 model;
	float4x4 view;
	float4x4 proj;
};

cbuffer ubo : register(b2) { UBOMatrices ubo; };

struct VertexOutput
{
	float4 position: SV_Position;
};

static const float4 cube_vertices[8] = {
	float4(0.0, 0.0, 0.0, 1.0),
	float4(1.0, 0.0, 0.0, 1.0),
	float4(0.0, 1.0, 0.0, 1.0),
	float4(1.0, 1.0, 0.0, 1.0),
	float4(0.0, 0.0, 1.0, 1.0),
	float4(1.0, 0.0, 1.0, 1.0),
	float4(0.0, 1.0, 1.0, 1.0),
	float4(1.0, 1.0, 1.0, 1.0),
};

static const uint2 cube_indices[12] = {
	uint2(0, 1),
	uint2(2, 3),
	uint2(4, 5),
	uint2(6, 7),
	uint2(0, 4),
	uint2(2, 6),
	uint2(1, 5),
	uint2(3, 7),
	uint2(0, 2),
	uint2(1, 3),
	uint2(5, 7),
	uint2(4, 6),
};

[outputtopology("line")]
[numthreads(1, 1, 1)]
void main(out indices uint2 lines[12], out vertices VertexOutput vertices[3], uint3 DispatchThreadID : SV_DispatchThreadID)
{
	float4x4 mvp = mul(ubo.proj, mul(ubo.view, ubo.model));

	float4 offset = float4(0.0, 0.0, (float)DispatchThreadID, 0.0);

	SetMeshOutputCounts(8, 12);
    for (uint i = 0; i < 8; i++) {
		vertices[i].position = mul(mvp, cube_vertices[i] + float4(1.0,1.0,1.0,0.0));
    }
    for (uint i = 0; i < 12; i++) {
		lines[i] = cube_indices[i];
    }
}
